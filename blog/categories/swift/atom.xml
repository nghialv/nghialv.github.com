<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | nghialv blog]]></title>
  <link href="http://nghialv.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://nghialv.github.io/"/>
  <updated>2015-04-19T23:04:03+09:00</updated>
  <id>http://nghialv.github.io/</id>
  <author>
    <name><![CDATA[nghialv]]></name>
    <email><![CDATA[nghialv2607@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lazy Evaluation in Swift]]></title>
    <link href="http://nghialv.github.io/blog/2015/04/19/lazy-evaluation-in-swift/"/>
    <updated>2015-04-19T17:24:46+09:00</updated>
    <id>http://nghialv.github.io/blog/2015/04/19/lazy-evaluation-in-swift</id>
    <content type="html"><![CDATA[<p>Đối với các ngôn ngữ lập trình hàm như Haskell thì lazy evaluation dường như rất phổ biến. Nhưng đối với các lập trình viên iOS, hay lập trình viên sử dụng một số ngôn ngữ khác chúng ta lại ít chú ý đến. Khi sử dụng Swift mình thấy Swift cũng hỗ trợ khá nhiều về <code>lazy evaluation</code> không hẳn chỉ là <code>lazy property</code>. Thế nhưng có lẽ do tài liệu về Swift chưa được nhiều hoặc ít chú ý đến <code>lazy evaluation</code> nên có thể chúng ta chưa áp dụng nhiều. Vậy nên bài viết này sẽ tập trung nói về các chiến lược lazy evaluation của Swift. Bài viết sẽ đi qua từng <code>evaluation strategy</code>, và mỗi strategy sẽ cố gắng tập hợp nhiều ví dụ khác nhau để chúng ta hiểu rõ và dễ áp dụng sau này.</p>

<p>Đầu tiên hãy cùng xem qua định nghĩa về <code>evaluation strategy</code> từ Wikipedia:</p>

<p align="center">
<img style="-webkit-user-select: none;" src="https://qiita-image-store.s3.amazonaws.com/0/18907/cd13467a-b136-402c-6cbc-704881b0cbff.png" height="120">
</p>


<p>Ở đây chúng ta nhấn mạnh vào <code>when</code> và <code>what</code>.</p>

<p><code>What</code> thì có lẽ quen thuộc hơn với 2 strategies nổi bật là <code>call-by-value</code>, <code>call-by-reference</code> (Tên gọi của các strategy trong bài viết này mình sử dụng như tại Wikipedia). Đối với Swift thì các đối số thuộc kiểu Class sẽ áp dụng call-by-reference còn các kiểu dữ liệu còn lại như String, Struct, Tuple, Enum, Int, &hellip; đều áp dụng call-by-value strategy. Như chúng ta đều biết với call-by-value thì trong hàm sẽ thao tác với 1 bản copy của đối số truyền vào nên không ảnh hưởng đến giá trị bên ngoài hàm. Còn call-by-reference thì thay cho việc copy mà thao tác với một reference tới instance của đối số nên mọi thay đổi bên trong hàm tới đối số sẽ ảnh hưởng đến biến bên ngoài hàm.</p>

<p>Còn <code>When</code> ở đấy muốn nói tới thời điểm đối số được evaluate, và sẽ là chủ đề chính của bài viết hôm nay. <code>When</code> thường thì chia làm 3 loại chính như sau:</p>

<ul>
<li>Eager evaluation</li>
<li>Call by name</li>
<li>Call by need</li>
</ul>


<p>Mình sẽ đi qua từng loại và kèm theo các ví dụ trong Swift, sau cùng sẽ rút ra kết luận về từng loại.</p>

<p><strong>(Eager evaluation)</strong></p>

<p>Đầu tiên mình hãy nhìn vào đoạn code đơn giản sau:</p>

<pre><code class="swift">func dosomething() -&gt; Int {
    println("dosomething")
    return 1
}

func foo(x: Int, status: String) {
    println("foo")
}

foo(dosomething(), "200")
</code></pre>

<pre><code>// output
dosomething
foo
</code></pre>

<p>Nhìn vào output chúng ta thấy rằng hàm <code>dosomething</code> chạy trước hàm <code>foo</code>. Từ đấy có thể thấy đối số của <code>foo</code> đã bị evaluate trước khi body của hàm <code>foo</code> được thực hiện. Đây chính là <code>eager evaluation</code> strategy: đối số được evaluate trước khi truyền vào hàm. Tiếp theo chúng ta hãy cùng nhìn vào đoạn code sau:</p>

<pre><code class="swift">func expensiveComputation() -&gt; Int {
    println("expensiveComputation")
    return 1
}

func foo(x: Int, status: String) {
    println("foo")
    let result = status == "200" ? x : 0

    println("result: \(result)")
}

foo(expensiveComputation(), "404")
</code></pre>

<pre><code>// output
expensiveComputation
foo
result: 0
</code></pre>

<p>Điểm khác biệt đầu tiên so với đoạn code trước đó là chúng ta có 1 tình toán cực kỳ tốn chi phí <code>expensiveComputation</code>, và được truyền vào như một đối số <code>x</code> của hàm <code>foo</code>. Hơn nữa bản thân bên trong hàm <code>foo</code> có những trường hợp không cần dùng đến <code>x</code> (như ví dụ là khi status != &ldquo;200&rdquo;). Quả là sự phung phí không hề nhỏ khi mà tồn tại trường hợp x không cần dùng đến nhưng đối số <code>x</code> vẫn bị evaluate từ đầu dẫn đến hàm <code>expensiveComputation</code> vẫn bị thực hiện.
Đây là ví dụ thứ nhất cho thấy vấn đề của <code>eager evaluation</code>.</p>

<p>Ví dụ tiếp theo khi sử dụng <code>map</code> và <code>filter</code> như sau:</p>

<pre><code class="swift ">var array = Array(0...100000)
let doubles = array.map { i -&gt; Int in
    println("map")
    return i * 2
}

let x = doubles[1]
println(x)
</code></pre>

<pre><code>// output
map
... // (100001 lần)
map 
0
</code></pre>

<p>Đây chỉ là ví dụ đơn giản để chúng ta dễ hiểu hơn. Còn hãy tưởng tượng bạn có 1 mảng khá lớn và sau khi qua các bước sử dụng <code>map</code>, <code>filter</code> để xử lý thì cuối cùng chúng ta chỉ sử dụng 1 số lượng phần tử nhỏ hơn nhiều so với số lượng mảng ban đầu. Nhưng tất cả các phần tử trong mảng đều đã bị evaluate cho dù tồn tại những phần tử không thực sự cần thiết phải evaluate.</p>

<p>Thêm một ví dụ nữa sử dụng <code>function currying</code> như đoạn code sau:</p>

<pre><code class="swift ">func dosomething() -&gt; Int {
    println("dosomething")
    return 1
}

func foo(a: Int)(b: Int) {
    println("add")
}

let cFoo = foo(dosomething())

//cFoo(b: 10)
</code></pre>

<p>Sau khi truyền đối số thứ nhất cho hàm <code>foo</code> chúng ta sẽ nhận được 1 hàm mới là <code>cFoo</code>. Hàm cFoo này sẽ có nhiệm vụ nhận thêm 1 đối số còn lại của hàm <code>foo</code> bạn đầu và sau đó thực hiện xử lý bên trong <code>foo</code>. Các xử lý trong <code>foo</code> chỉ thực hiện khi chúng ta gọi <code>cFoo</code> với đối số còn lại là <code>b</code>.
Thế nhưng với <code>eager evaluation</code> strategy thì đối số <code>a</code> bị evaluate tại thời điểm tạo hàm <code>cFoo</code>, ngay cả khi cFoo chưa được gọi. Dẫn tới thời điểm evaluate <code>a</code>, thời điểm evaluate <code>b</code>, thời điểm xử lý của hàm <code>foo</code> được thực hiện là hoàn toàn khác nhau.</p>

<p>Từ 3 ví dụ trên chúng ta thấy có những trường hợp chúng ta chỉ muốn evaluate khi thực sự cần thiết, hay chỉ muốn evaluate những biến cần dùng, hay có thể chúng ta muốn thay đổi thời điểm evaluate vào bên trong hàm. Điều này sẽ được giải quyết bởi <code>call-by-name</code> strategy.</p>

<p><strong>(Call-by-name)</strong></p>

<p>Để chuyển thời điểm evaluate vào trong hàm hay chỉ evaluate khi thực sự cần thiết, với Swift thì tuỳ trường hợp mà ta có cách khác nhau. Trường hợp function/method do chúng ta tự khai báo như ví dụ thứ nhất và thứ ba ở phần trước chúng ta có thể sửa lại cách khai báo đối số bằng cách wrap đối số bởi một closure như đoạn code sau:</p>

<pre><code class="swift">func expensiveComputation() -&gt; Int {
    println("expensiveComputation")
    return 1
}

func foo(x: () -&gt; Int, status: String) {
    println("foo")
    let result = status == "200" ? x() : 0
    println("result: \(result)")
}

foo({ expensiveComputation() }, "404")
</code></pre>

<pre><code>// output
foo
result: 0
</code></pre>

<p>Đối số đầu tiên của hàm <code>foo</code> không phải kiểu <code>Int</code> như ban đầu mà chuyển thành closure có kiểu <code>() -&gt; Int</code>. Và khi cần evaluate chúng ta gọi closure <code>x()</code> để evaluate. Như vậy đối số <code>x</code> sẽ không bị evaluate trước khi hàm <code>foo</code> được thực hiện, và ngoài ra chỉ trong trường hợp <code>status == "200"</code> thì <code>x</code> mới bị evaluate và hàm <code>expensiveComputation</code> mới bị thực hiện.
Tuy nhiên chú ý rằng hàm <code>foo</code> đã thay đổi khai báo nên khi gọi hàm <code>foo</code> chúng ta phải wrap đối số thứ nhất trong 1 closure có kiểu <code>() -&gt; Int</code> như <code>{ expensiveComputation() }</code>.
Tuy nhiên việc gọi rườm rà này chúng ta có thể giải quyết bằng việc sử dụng thuộc tính <code>@autoclosure</code> khi khai báo hàm <code>foo</code> như sau:</p>

<pre><code class="swift">func expensiveComputation() -&gt; Int {
    println("expensiveComputation")
    return 1
}

func foo(x: @autoclosure () -&gt; Int, status: String) {
    println("foo")
    let result = status == "200" ? x() : 0
    println("result: \(result)")
}

foo(expensiveComputation(), "404")
</code></pre>

<p>Nhờ có việc sử dụng <code>@autoclosure</code> mà khi gọi hàm <code>foo</code> chúng ta thấy code không có gì thay đổi so với bình thường.</p>

<p>Thế còn trường hợp như ví dụ thứ hai của phần trước thì sao. Khi mà chúng ta chỉ muốn evaluate những biến thực sự cần thiết, nhưng hàm <code>map</code> và <code>filter</code> là do thư viện chuẩn của Swift cung cấp, chúng ta không thể thêm <code>@autoclosure</code> vào được. Tin vui đó là Swift cung cấp chúng ta function <code>lazy()</code> mà ít khi ta chú ý tới.</p>

<p align="center">
<img style="-webkit-user-select: none;" src="https://qiita-image-store.s3.amazonaws.com/0/18907/dbf84e44-9664-e29d-6dfa-64de9d10829c.png" height="180">
</p>


<p>Ví dụ như để giải quyết vấn đề ở ví dụ trước chúng ta chỉ cần sử dụng function <code>lazy</code> để tạo ra lazy collection như sau:</p>

<pre><code class="swift">var array = lazy(Array(0...1000))
let doubles = array.map { i -&gt; Int in
    println("map")
    return i * 2
}

let x = doubles[1]
println(x)
</code></pre>

<pre><code>// output
map
0
</code></pre>

<p>Và kết quả là chỉ những phần tử cần thiết mới phải evaluate.</p>

<p>Mình lại tiếp tục cùng xem đoạn code sau:</p>

<pre><code class="swift">func expensiveComputation() -&gt; Int {
    println("expensiveComputation")
    return 1
}

func foo(x: @autoclosure () -&gt; Int, status: String) {
    println("foo")
    let result = status == "200" ? x() : 0

    let t1 = x()
    let t2 = x()

    println("result: \(result)")
}

foo(expensiveComputation(), "404")
</code></pre>

<pre><code>// output
foo
expensiveComputation
expensiveComputation
result: 0
</code></pre>

<p>Ta thấy rằng mỗi lần access thì x lại bị evaluate lại tức là hàm <code>expensiveComputation</code> bị thực hiện lại. Không ít những trường hợp mà chúng ta muốn tránh việc evaluate lại như thế. Đấy chính là điểm khác biệt của <code>call-by-need</code> so với <code>call-by-name</code>.</p>

<p><strong>(Call-by-need)</strong></p>

<p>Giống như call-by-name strategy, call-by-need cũng chỉ evaluate biến khi thực sự cần thiết, thế nhưng việc evaluate chỉ thực hiện lần đầu và kết quả được lưu lại và sử dụng cho những lần access tiếp theo.
Và dễ nhận thấy nhất là <code>lazy property</code> cũng sử dụng call-by-need strategy.</p>

<pre><code class="swift">class Foo {
    lazy var tmp: Int = {
            println("tmp init")
            return 1
        }()
}

println("before init")
let foo = Foo()
println("after init")
foo.tmp
foo.tmp
</code></pre>

<pre><code>// output
before init
after init
tmp init
</code></pre>

<p>Nhìn vào kết quả output ta thấy property <code>tmp</code> chỉ được evaluate khi cần thiết (khi acccess <code>foo.tmp</code>). Ngoài ra việc evaluate chỉ thực hiện một lần duy nhất, những lần access sau đều sử dụng giá trị đã evaluate ở lần đầu tiên.
Ngoài <code>lazy property</code> thì <code>global variable</code> hay <code>static property</code> đều mặc định áp dụng call-by-need strategy.</p>

<pre><code class="swift ">struct Foo {
    static var tmp: Int = {
            println("tmp init")
            return 1
        }()

    static func log() {
        println("foo")
    }
}

let foo = Foo()
Foo.log()
println("access tmp")
let x = Foo.tmp
</code></pre>

<pre><code>// output
foo
access tmp
tmp init
</code></pre>

<h5>Kết luận</h5>

<ul>
<li><code>Eager evaluation</code>:

<ul>
<li>evaluation được thực hiện trước khi truyền vào hàm</li>
</ul>
</li>
<li><code>Call-by-name</code>:

<ul>
<li>evaluation thực hiện trong hàm hay chỉ evaluate khi thực sư cần thiết</li>
<li>thế nhưng việc evaluation sẽ bị thực hiện lại mỗi khi access</li>
<li>cách áp dụng call-by-name strategy:

<ul>
<li>đối với những funtion/method tự khai báo thì có thể dùng <code>@autoclosure</code> để thực hiện call-by-name strategy</li>
<li>khi sử dụng <code>map</code>, <code>filter</code> chúng ta có thể sử dụng function <code>lazy</code> để tạo ra lazy collection/sequence</li>
</ul>
</li>
</ul>
</li>
<li>Call-by-need:

<ul>
<li>evaluation chỉ thực hiện khi cần thiết</li>
<li>lazy evaluation, global variable, static property mặc định áp dụng strategy này</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hakuba]]></title>
    <link href="http://nghialv.github.io/blog/2015/03/20/hakuba/"/>
    <updated>2015-03-20T01:33:10+09:00</updated>
    <id>http://nghialv.github.io/blog/2015/03/20/hakuba</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/nghialv/Hakuba">Github</a></p>

<p>I want to slim down my view controllers.</p>

<p>I want to manage tableview without the code of <code>UITableViewDelegate</code> and <code>UITableViewDataSource</code>.</p>

<p>That is why I created <code>Hakuba</code>.</p>

<p>( <strong>Hakuba</strong> is one of the most famous ski resorts in Japan. )</p>

<h2>Features</h2>

<ul>
<li>Don&rsquo;t have to write the code for <code>UITableViewDelegate</code> and <code>UITableViewDataSource</code> protocols</li>
<li>Easy to manage your sections and cells (append/reset/insert/remove/update)</li>
<li>Support dynamic cell height from <strong>ios7</strong></li>
<li>Don&rsquo;t have to worry about cell identifier</li>
<li>Handling cell selection by trailing closure</li>
<li>Easy to implement header/footer view (floating callback)</li>
<li>Support for creating cells from Nibs or Storyboards</li>
<li>Method chaining</li>
<li>Subscript</li>
<li>Support loadmore closure</li>
<li>Complete example</li>
</ul>


<h5>Quick example</h5>

<pre><code class="swift">    // viewController swift file

    hakuba = Hakuba(tableView: tableView)

    let cellmodel = YourCellModel(title: "Title", des: "description") {
        println("Did select cell with title = \(title)")
    }

    hakuba[2].append(cellmodel)     // append a new cell model in datasource
             .slide(.Fade)          // show the cell of your cell model in the table view

    hakuba[1].remove(1...3)
             .slide(.Right)
</code></pre>

<pre><code class="swift">    // your cell swift file

    class YourCellModel : MYCellModel {
        let title: String
        let des: String

        init(title: String, des: String, selectionHandler: MYSelectionHandler) {
            self.title = title
            self.des = des
            super.init(YourCell.self, selectionHandler: selectionHandler)
        }
    }


    class YourCell : MYTableViewCell {
        @IBOutlet weak var titleLabel: UILabel!

        override func configureCell(data: MYCellModel) {
            super.configureCell(data)
            if let cellmodel = data as? YourCellModel {
                titleLabel.text = cellmodel.title
            }
        }
    }
</code></pre>

<h2>Usage</h2>

<ul>
<li>Initilization</li>
</ul>


<pre><code class="swift">    private var hakuba = Hakuba(tableView: tableView)   
</code></pre>

<ul>
<li>Section handling</li>
</ul>


<pre><code class="swift">    let section = hakuba[secIndex]  // retrieve a section or create a new section if it doesn't already exist

    // inserting
    hakuba.insert(section, atIndex: 1)
          .slide()

    // removing
    hakuba.remove(index)
          .slide(.Left)

    hakuba.removeAll()
          .slide()

    // handing section index by enum
    enum Section : Int, MYSectionIndex {
        case Top = 0
        case Center
        case Bottom

        var intValue: Int {
            return self.rawValue
        }
    }
    let topSection = hakuba[Section.Top]
</code></pre>

<ul>
<li>Cell handling</li>
</ul>


<pre><code class="swift">    // 1. appending
    hakuba[0].append(cellmodel)             // append a cellmodel
             .slide(.Fade)                  // and slide with `Fade` animation

    hakuba[1].append(cellmodels)            // append a list of cellmodes
            .slide(.Left)                   

    // by using section
    let section = hakuba[Section.Top]
    section.append(cellmodel)
           .slide()


    // 2. inserting
    section.insert(cellmodels, atIndex: 1)
           .slide(.Middle)


    // 3. reseting
    section.reset(cellmodels)               // replace current data in section by the new data
           .slide()
    section.reset()                         // or remove all data in section
           .slide()


    // 4. removing
    section.remove(1)
           .slide(.Right)
    section.remove(2...5)
           .slide()
    section.removeLast()
           .slide()
</code></pre>

<pre><code class="swift">    // updating cell data
    let section = hakuba[Section.Top]
    section[1].property = newData
    section[1].slide()      
</code></pre>

<pre><code class="swift">    section.sort().slide()
    section.shuffle().slide()
    section.map
    section.filter
    section.reduce
    section.mapFilter
    section.each

    section.first
    section.last
    section[1]
    section.count
</code></pre>

<ul>
<li>Creating cell model</li>
</ul>


<pre><code class="swift">    // create a cell model
    let cellmodel = MYCellModel(cellClass: YourCell.self, userData: celldata) {
        println("Did select")
    }

    // create a list of cell models from api results
    let items = [...] // or your data from API

    let cellmodels = items.map { item -&gt; MYCellModel in
        return MYCellModel(cellClass: YourCell.self, userData: item) {
            println("Did select cell")
        }
    }
</code></pre>

<ul>
<li>Register cell, header, footer</li>
</ul>


<pre><code class="swift">    hakuba.registerCellNib(CellClassName)
    hakuba.registerCellClass(CellClassName)
    hakuba.registerHeaderFooterNib(HeaderOrFooterClassName)
    hakuba.registerHeaderFooterClass(HeaderOrFooterClassName)

    // register a list of cells by using variadic parameters
    hakuba.registerCellNib(CellClass1.self, CellClass2.self, ..., CellClassN.self)
</code></pre>

<ul>
<li>Section header/footer</li>
</ul>


<pre><code class="swift">    let header = MYHeaderFooterViewModel(viewClass: CustomHeaderView.self, userData: yourData) {
        println("Did select header view")
    }
    hakuba[Section.Top].header = header

    // hide header in section 1
    hakuba[Section.Center].header?.enabled = false
</code></pre>

<ul>
<li>Loadmore</li>
</ul>


<pre><code class="swift">    hakuba.loadmoreEnabled = true
    hakuba.loadmoreHandler = {
        // request api
        // append new data
    }
</code></pre>

<ul>
<li>Commit editing</li>
</ul>


<pre><code class="swift">    hakuba.commitEditingHandler = { [weak self] style, indexPath in
        self?.hakuba[indexPath.section].remove(indexPath.row)
    }
</code></pre>

<ul>
<li>Deselect all cells</li>
</ul>


<pre><code class="swift">    hakuba.deselectAllCells(animated: true)
</code></pre>

<ul>
<li>Dynamic cell height : when you want to enable dynamic cell height, you only need to set the value of estimated height to the <code>height</code> parameter and set <code>dynamicHeightEnabled = true</code></li>
</ul>


<pre><code class="swift">    let cellmodel = MYCellModel(cellClass: YourCell.self, height: 50, userData: yourCellData) {
        println("Did select cell")
    }
    cellmodel.dynamicHeightEnabled = true
</code></pre>

<ul>
<li>Callback methods in the cell class</li>
</ul>


<pre><code class="swift">    func willAppear(data: MYCellModel)
    func didDisappear(data: MYCellModel)
</code></pre>

<h2>Installation</h2>

<ul>
<li>Installation with CocoaPods</li>
</ul>


<pre><code>    pod 'Hakuba'
</code></pre>

<ul>
<li>Copying all the files into your project</li>
<li>Using submodule</li>
</ul>


<h2>Requirements</h2>

<ul>
<li>iOS 7.0+</li>
<li>Xcode 6.1</li>
</ul>


<h2>License</h2>

<p>Hakuba is released under the MIT license. See LICENSE for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MaterialKit]]></title>
    <link href="http://nghialv.github.io/blog/2015/01/20/materialkit/"/>
    <updated>2015-01-20T01:20:13+09:00</updated>
    <id>http://nghialv.github.io/blog/2015/01/20/materialkit</id>
    <content type="html"><![CDATA[<p>Material design components (inspired by <a href="http://www.google.com/design/spec/material-design/introduction.html">Google Material Design</a>) for iOS written in Swift</p>

<p>Please feel free to make pull requests.</p>

<p><a href="https://github.com/nghialv/MaterialKit">Github</a></p>

<h2>Features</h2>

<ul>
<li>Highly customizable</li>
<li>Complete example</li>
<li>Supports @IBDesignable to live-render the component in the Interface Builder</li>
<li><p>By suporting @IBInspectable, the class properties can be exposed in the Interface Builder, and you can edit these properties in realtime</p></li>
<li><p>[x] MKButton: floating action button, raised button, flat button, ripple effect</p></li>
<li>[x] MKTextField: ripple effect, floating placeholder</li>
<li>[x] MKTableViewCell</li>
<li>[x] MKLabel</li>
<li>[x] MKImageView</li>
<li>[ ] MKTextView <strong>(In progress)</strong></li>
<li>[ ] MKSwitch <strong>(In progress)</strong></li>
<li>[ ] MKAlert <strong>(In progress)</strong></li>
<li>[ ] MKActivityIndicator <strong>(In progress)</strong></li>
<li>[x] MKLayer</li>
<li>[x] MKColor</li>
</ul>


<h2>Components</h2>

<h4>MKButton</h4>

<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKButton.gif" width="365" height="568">
</p>


<ul>
<li>There are 3 types of main buttons: <code>Floating Action Button</code>, <code>Raised Button</code>, <code>Flat Button</code></li>
<li>Custommizable attributes: color, ripple location, animation timing function, animation duration&hellip;</li>
</ul>


<pre><code class="swift">    let button = MKButton(frame: CGRect(x: 10, y: 10, width: 100, height: 35))
    button.maskEnabled = true
    button.rippleLocation = .TapLocation
    button.rippleLayerColor = UIColor.MKColor.LightGreen
</code></pre>

<h4>MKTextField</h4>

<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKTextField.gif" width="365" height="568">
</p>


<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKTextField_bottomborder.gif" width="365" height="111">
</p>


<ul>
<li>Single-line text field</li>
<li>Floating placeholder</li>
<li>Ripple Animation</li>
<li>Custommizable attributes: color, ripple location, bottom border, animation timing function, animation duration&hellip;</li>
</ul>


<pre><code class="swift">    textField.rippleLocation = .Left
    textField.floatingPlaceholderEnabled = true
    textField.placeholder = "Description"
    textField.layer.borderColor = UIColor.MKColor.Green.CGColor
    textField.rippleLayerColor = UIColor.MKColor.LightGreen
</code></pre>

<h4>MKTableViewCell</h4>

<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKTableViewCell.gif" width="365" height="568">
</p>


<ul>
<li>Custommizable attributes: color, ripple location, animation timing function, animation duration&hellip;</li>
</ul>


<pre><code class="swift">    var cell = tableView.dequeueReusableCellWithIdentifier("MyCell") as MyCell
    cell.rippleLocation = .Center
    cell.rippleLayerColor = UIColor.MKColor.Blue
</code></pre>

<h4>MKLabel, MKImageView (BarButtonItem)</h4>

<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKBarButtonItem.gif" width="373" height="334">
</p>


<ul>
<li>Custommizable attributes: color, ripple location, animation timing function, animation duration&hellip;</li>
<li><p>Play ripple animation whenever you want by calling <code>animateRipple</code> method
or by setting <code>userInteractionEnabled = true</code> ripple animation will be played when the label/imageview is tapped</p></li>
<li><p>Easy to customize UIBarButtonItem or UITabBarButton by using MKLabel or MKImageView</p></li>
</ul>


<pre><code class="swift">    // customize UIBarButtonItem by using MKImageView
    let imgView = MKImageView(frame: CGRect(x: 0, y: 0, width: 44, height: 32))
    imgView.image = UIImage(named: "uibaritem_icon.png")
    imgView.rippleLocation = .Center
    imgView.userInteractionEnabled = true

    let rightBarButton = UIBarButtonItem(customView: imgView)
    self.navigationItem.rightBarButtonItem = rightBarButton
</code></pre>

<h4>MKProgressView (Coming Soon)</h4>

<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKProgressView2.gif" width="217" height="155">
</p>




<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKProgressView.gif" width="217" height="155">
</p>


<h4>MKLayer</h4>

<p>A subclass of CALayer.</p>

<h4>MKColor</h4>

<p>A category for UIColor that adds some methods to get flat colors designed by <a href="http://www.google.com/design/spec/style/color.html">Google</a></p>

<pre><code class="swift">    // get color from UIColor
    let lightBlueColor = UIColor.MKColor.LightBlue
</code></pre>

<h2>TODO</h2>

<ul>
<li>[x] pod file</li>
</ul>


<h2>Installation</h2>

<ul>
<li>Installation with CocoaPods</li>
</ul>


<pre><code>    pod 'MaterialKit'
</code></pre>

<ul>
<li>Copying all the files into your project</li>
<li>Using submodule</li>
</ul>


<h2>Requirements</h2>

<ul>
<li>iOS 7.0+</li>
<li>Xcode 6.1</li>
</ul>


<h2>License</h2>

<p>MaterialKit is released under the MIT license. See LICENSE for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Net - a HttpRequest wrapper]]></title>
    <link href="http://nghialv.github.io/blog/2014/10/15/net-a-httprequest-wrapper-written-in-swift/"/>
    <updated>2014-10-15T08:29:00+09:00</updated>
    <id>http://nghialv.github.io/blog/2014/10/15/net-a-httprequest-wrapper-written-in-swift</id>
    <content type="html"><![CDATA[<p>Net is a HttpRequest wrapper written in Swift.</p>

<p><a href="https://github.com/nghialv/Net">source code : https://github.com/nghialv/Net</a></p>

<h3>Features</h3>

<ul>
<li>GET, POST, PUT, DELETE method</li>
<li>Powerful request params: nested params, number, string, dic, array, image, data</li>
<li>Json, Image, Xml Response</li>
<li>Download file: resume, suspend, cancel</li>
<li>Upload file, data, params(multi-part)</li>
<li>Progress closure</li>
<li>Background donwload, upload</li>
<li>Authentication</li>
<li>Batch of operations</li>
<li>BaseURL</li>
<li>Customizable header</li>
</ul>


<h3>Demo app</h3>

<p><img src="https://dl.dropboxusercontent.com/u/8556646/screenshot2.png" alt="screenshot" /></p>

<h3>Usage</h3>

<p>Use one of the following methods to create a Net instance</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// without baseURL</span>
</span><span class='line'><span class="k">let</span> <span class="n">net</span> <span class="o">=</span> <span class="n">Net</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// with baseURL</span>
</span><span class='line'><span class="k">let</span> <span class="n">net</span> <span class="o">=</span> <span class="n">Net</span><span class="p">(</span><span class="nl">baseUrlString</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.puqiz.com/&quot;</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//www.puqiz.com/&lt;/a&gt;&amp;rdquo;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>HttpRequest</h4>

<h6><code>GET</code> Request</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">get_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">integerNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">doubleNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hello</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">GET</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">result</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can also make a request with absolute url</span>
</span><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.puqiz.com/get_path&quot;</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//www.puqiz.com/get_path&lt;/a&gt;&amp;rdquo;</span>
</span><span class='line'><span class="n">net</span><span class="p">.</span><span class="n">GET</span><span class="p">(</span><span class="nl">absoluteUrl</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">result</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can also use nested params</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// nested params</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">integerNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">floatNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">1.5</span><span class="p">,</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">array</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">],</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">dictionary</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">x</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">100.0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">y</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">200.0</span><span class="p">],</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">image</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="n">NetData</span><span class="p">(</span><span class="nl">pngImage</span><span class="p">:</span> <span class="n">img</span><span class="p">,</span> <span class="nl">filename</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">myIcon</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>By using responseData in sucessHandler closure you can quickly</p>

<ul>
<li>get json dictionary</li>
<li>get image</li>
<li>parse xml</li>
</ul>


<p>for GET, POST, PUT, DELETE request.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// get json dictionary from response data</span>
</span><span class='line'><span class="k">let</span> <span class="n">jsonDic</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="n">error</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// get image from response data</span>
</span><span class='line'><span class="k">let</span> <span class="n">image</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">image</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// parse xml with delegate</span>
</span><span class='line'><span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">parseXml</span><span class="p">(</span><span class="nl">delegate</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6><code>POST</code> Request</h6>

<p>Net will automatically check your params to send request as a URL-Encoded request or a Multi-Part request. So you can easily post with number, string, image or binary data.</p>

<ul>
<li>URL-Encoded Request</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">post_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">integerNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">floatNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">1.5</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">POST</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">result</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Multi-Part Request</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">post_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">img</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">puqiz_icon</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">integerNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">icon</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="n">NetData</span><span class="p">(</span><span class="nl">pngImage</span><span class="p">:</span> <span class="n">img</span><span class="p">,</span> <span class="nl">filename</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">myIcon</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">POST</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">result</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6><code>PUT</code> Request</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">put_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">integerNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">floatNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">1.5</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">PUT</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">result</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6><code>DELETE</code> Request</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">delete_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="kt">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">10</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">DELETE</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">result</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Task</h4>

<p>Before using download/upload function you have to call <code>setupSession</code> method to setup the session.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// setup session without backgroundIdentifier</span>
</span><span class='line'><span class="n">net</span><span class="p">.</span><span class="n">setupSession</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>To perform background downloads or uploads, you have to call <code>setupSession</code> method with a background identifier string. Then your download/upload tasks can be run even when the app is suspended, exits or crashes.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// setup session with backgroundIdentifier</span>
</span><span class='line'><span class="n">net</span><span class="p">.</span><span class="n">setupSession</span><span class="p">(</span><span class="nl">backgroundIdentifier</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">com</span><span class="p">.</span><span class="n">nghialv</span><span class="p">.</span><span class="n">download</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can set eventsForBackgroundHandler closure</span>
</span><span class='line'><span class="c1">// this closure will be invoked when a task is completed in the background</span>
</span><span class='line'><span class="n">net</span><span class="p">.</span><span class="n">eventsForBackgroundHandler</span> <span class="o">=</span> <span class="p">{</span> <span class="n">urlSession</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">urlSession</span><span class="p">.</span><span class="n">getDownloadingTasksCount</span><span class="p">{</span> <span class="n">downloadingTaskCount</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">downloadingTaskCount</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">All</span> <span class="n">files</span> <span class="n">have</span> <span class="n">been</span> <span class="n">downloaded</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6>Download</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">downloadTask</span> <span class="o">=</span> <span class="n">net</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="nl">absoluteUrl</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">progress</span><span class="p">:</span> <span class="p">{</span> <span class="n">progress</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">progress</span> <span class="p">(</span><span class="n">progress</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">fileUrl</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Download</span> <span class="n">failed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Downloaded</span> <span class="nl">to</span>  <span class="p">:</span> <span class="p">(</span><span class="n">fileUrl</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can control your task</span>
</span><span class='line'><span class="n">downloadTask</span><span class="p">.</span><span class="n">resume</span><span class="p">()</span>
</span><span class='line'><span class="n">downloadTask</span><span class="p">.</span><span class="n">suspend</span><span class="p">()</span>
</span><span class='line'><span class="n">downloadTask</span><span class="p">.</span><span class="n">cancel</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6>Upload</h6>

<ul>
<li>Upload with file path</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">task</span> <span class="o">=</span> <span class="n">net</span><span class="p">.</span><span class="n">upload</span><span class="p">(</span><span class="nl">absoluteUrl</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">fromFile</span><span class="p">:</span> <span class="n">file</span><span class="p">,</span> <span class="nl">progressHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">progress</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">progress</span> <span class="p">(</span><span class="n">progress</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Upload</span> <span class="nl">failed</span> <span class="p">:</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Upload</span> <span class="n">completed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Upload with data</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">yourData</span> <span class="o">=</span> <span class="bp">NSData</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">upload</span><span class="p">(</span><span class="nl">absoluteUrl</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">data</span><span class="p">:</span> <span class="n">yourData</span><span class="p">,</span> <span class="nl">progressHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">progress</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">progress</span><span class="p">:</span> <span class="p">(</span><span class="n">progress</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Upload</span> <span class="n">completed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Upload with params</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">image</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">image_file</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">let</span> <span class="n">imageData</span> <span class="o">=</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">number</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">net</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">data</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="n">imageData</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">upload</span><span class="p">(</span><span class="nl">absoluteUrl</span><span class="p">:</span> <span class="n">imgUrl</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">progressHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">progress</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">progress</span><span class="p">:</span> <span class="p">(</span><span class="n">progress</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Upload</span> <span class="n">completed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>By default, the upload task will be performed as POST method and</p>

<ul>
<li><code>Content-Type</code> = <code>application/octet-stream</code> (upload with file or data)</li>
<li><code>Content-Type</code> = <code>multipart/form-data</code> (upload with params)</li>
</ul>


<p>But you can configure the upload task before resuming.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// set method</span>
</span><span class='line'><span class="n">yourUploadTask</span><span class="p">.</span><span class="n">setHttpMethod</span><span class="p">(.</span><span class="n">PUT</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// set header field</span>
</span><span class='line'><span class="n">yourUploadTask</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="nl">value</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">your_value</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nl">forHttpHeaderField</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">header_field</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>In progress</h3>

<ul>
<li>Batch of operations</li>
<li>Basic authentiacation</li>
</ul>


<h3>Integration</h3>

<p>Just drag Net folder to the project tree</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD - a wrapper of Grand Central Dispatch]]></title>
    <link href="http://nghialv.github.io/blog/2014/10/01/gcd-a-wrapper-of-grand-central-dispatch-written-in-swift/"/>
    <updated>2014-10-01T20:22:00+09:00</updated>
    <id>http://nghialv.github.io/blog/2014/10/01/gcd-a-wrapper-of-grand-central-dispatch-written-in-swift</id>
    <content type="html"><![CDATA[<p>GCD is a wrapper of Grand Central Dispatch written in Swift.</p>

<p><a href="https://github.com/nghialv/GCD">source code : https://github.com/nghialv/GCD</a></p>

<h3>Examples</h3>

<h6>- gcd</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// submit your code for asynchronous execution on a global queue with high priority</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">High</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// or with main thread</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'>    <span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// code run on main thread</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// with your custom queue</span>
</span><span class='line'><span class="k">let</span> <span class="n">myQueue</span> <span class="o">=</span> <span class="n">GCDQueue</span><span class="p">(</span><span class="nl">serial</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">myQueue</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Custom</span><span class="p">(</span><span class="n">myQueue</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// run with delay</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Background</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">5.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// sync code</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">sync</span><span class="p">(.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// apply</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">apply</span><span class="p">(.</span><span class="n">Default</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span> <span class="n">index</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// once</span>
</span><span class='line'><span class="k">var</span> <span class="nl">onceToken</span><span class="p">:</span> <span class="n">GCDOnce</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">onceToken</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6>- manage group of block with GCDGroup</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// create group</span>
</span><span class='line'><span class="k">let</span> <span class="n">group</span> <span class="o">=</span> <span class="n">GCDGroup</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can add async code to group</span>
</span><span class='line'><span class="n">group</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Defaul</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can set notify for this group</span>
</span><span class='line'><span class="n">group</span><span class="p">.</span><span class="n">notify</span><span class="p">(.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// or wait synchronously for block in group to complete and timeout is 10 seconds</span>
</span><span class='line'><span class="n">group</span><span class="p">.</span><span class="n">wait</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6>- create your custom queue with CGDQueue</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// create a serial queue</span>
</span><span class='line'><span class="k">let</span> <span class="n">serialQueue</span> <span class="o">=</span> <span class="n">GCDQueue</span><span class="p">(</span><span class="nl">serial</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">mySerialQueue</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// create a concurrent queue</span>
</span><span class='line'><span class="k">let</span> <span class="n">concurrentQueue</span> <span class="o">=</span> <span class="n">GCDQueue</span><span class="p">(</span><span class="nl">concurrent</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">myConcurrentQueue</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can submit async barrier to queue</span>
</span><span class='line'><span class="n">myQueue</span><span class="p">.</span><span class="n">asyncBarrier</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// or sync code</span>
</span><span class='line'><span class="n">myQueue</span><span class="p">.</span><span class="n">syncBarrier</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Integration</h3>

<p>Just drag GCD.swift file to the project tree</p>
]]></content>
  </entry>
  
</feed>
