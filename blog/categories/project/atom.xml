<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: project | nghialv blog]]></title>
  <link href="http://nghialv.github.io/blog/categories/project/atom.xml" rel="self"/>
  <link href="http://nghialv.github.io/"/>
  <updated>2015-04-19T23:04:03+09:00</updated>
  <id>http://nghialv.github.io/</id>
  <author>
    <name><![CDATA[nghialv]]></name>
    <email><![CDATA[nghialv2607@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hakuba]]></title>
    <link href="http://nghialv.github.io/blog/2015/03/20/hakuba/"/>
    <updated>2015-03-20T01:33:10+09:00</updated>
    <id>http://nghialv.github.io/blog/2015/03/20/hakuba</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/nghialv/Hakuba">Github</a></p>

<p>I want to slim down my view controllers.</p>

<p>I want to manage tableview without the code of <code>UITableViewDelegate</code> and <code>UITableViewDataSource</code>.</p>

<p>That is why I created <code>Hakuba</code>.</p>

<p>( <strong>Hakuba</strong> is one of the most famous ski resorts in Japan. )</p>

<h2>Features</h2>

<ul>
<li>Don&rsquo;t have to write the code for <code>UITableViewDelegate</code> and <code>UITableViewDataSource</code> protocols</li>
<li>Easy to manage your sections and cells (append/reset/insert/remove/update)</li>
<li>Support dynamic cell height from <strong>ios7</strong></li>
<li>Don&rsquo;t have to worry about cell identifier</li>
<li>Handling cell selection by trailing closure</li>
<li>Easy to implement header/footer view (floating callback)</li>
<li>Support for creating cells from Nibs or Storyboards</li>
<li>Method chaining</li>
<li>Subscript</li>
<li>Support loadmore closure</li>
<li>Complete example</li>
</ul>


<h5>Quick example</h5>

<pre><code class="swift">    // viewController swift file

    hakuba = Hakuba(tableView: tableView)

    let cellmodel = YourCellModel(title: "Title", des: "description") {
        println("Did select cell with title = \(title)")
    }

    hakuba[2].append(cellmodel)     // append a new cell model in datasource
             .slide(.Fade)          // show the cell of your cell model in the table view

    hakuba[1].remove(1...3)
             .slide(.Right)
</code></pre>

<pre><code class="swift">    // your cell swift file

    class YourCellModel : MYCellModel {
        let title: String
        let des: String

        init(title: String, des: String, selectionHandler: MYSelectionHandler) {
            self.title = title
            self.des = des
            super.init(YourCell.self, selectionHandler: selectionHandler)
        }
    }


    class YourCell : MYTableViewCell {
        @IBOutlet weak var titleLabel: UILabel!

        override func configureCell(data: MYCellModel) {
            super.configureCell(data)
            if let cellmodel = data as? YourCellModel {
                titleLabel.text = cellmodel.title
            }
        }
    }
</code></pre>

<h2>Usage</h2>

<ul>
<li>Initilization</li>
</ul>


<pre><code class="swift">    private var hakuba = Hakuba(tableView: tableView)   
</code></pre>

<ul>
<li>Section handling</li>
</ul>


<pre><code class="swift">    let section = hakuba[secIndex]  // retrieve a section or create a new section if it doesn't already exist

    // inserting
    hakuba.insert(section, atIndex: 1)
          .slide()

    // removing
    hakuba.remove(index)
          .slide(.Left)

    hakuba.removeAll()
          .slide()

    // handing section index by enum
    enum Section : Int, MYSectionIndex {
        case Top = 0
        case Center
        case Bottom

        var intValue: Int {
            return self.rawValue
        }
    }
    let topSection = hakuba[Section.Top]
</code></pre>

<ul>
<li>Cell handling</li>
</ul>


<pre><code class="swift">    // 1. appending
    hakuba[0].append(cellmodel)             // append a cellmodel
             .slide(.Fade)                  // and slide with `Fade` animation

    hakuba[1].append(cellmodels)            // append a list of cellmodes
            .slide(.Left)                   

    // by using section
    let section = hakuba[Section.Top]
    section.append(cellmodel)
           .slide()


    // 2. inserting
    section.insert(cellmodels, atIndex: 1)
           .slide(.Middle)


    // 3. reseting
    section.reset(cellmodels)               // replace current data in section by the new data
           .slide()
    section.reset()                         // or remove all data in section
           .slide()


    // 4. removing
    section.remove(1)
           .slide(.Right)
    section.remove(2...5)
           .slide()
    section.removeLast()
           .slide()
</code></pre>

<pre><code class="swift">    // updating cell data
    let section = hakuba[Section.Top]
    section[1].property = newData
    section[1].slide()      
</code></pre>

<pre><code class="swift">    section.sort().slide()
    section.shuffle().slide()
    section.map
    section.filter
    section.reduce
    section.mapFilter
    section.each

    section.first
    section.last
    section[1]
    section.count
</code></pre>

<ul>
<li>Creating cell model</li>
</ul>


<pre><code class="swift">    // create a cell model
    let cellmodel = MYCellModel(cellClass: YourCell.self, userData: celldata) {
        println("Did select")
    }

    // create a list of cell models from api results
    let items = [...] // or your data from API

    let cellmodels = items.map { item -&gt; MYCellModel in
        return MYCellModel(cellClass: YourCell.self, userData: item) {
            println("Did select cell")
        }
    }
</code></pre>

<ul>
<li>Register cell, header, footer</li>
</ul>


<pre><code class="swift">    hakuba.registerCellNib(CellClassName)
    hakuba.registerCellClass(CellClassName)
    hakuba.registerHeaderFooterNib(HeaderOrFooterClassName)
    hakuba.registerHeaderFooterClass(HeaderOrFooterClassName)

    // register a list of cells by using variadic parameters
    hakuba.registerCellNib(CellClass1.self, CellClass2.self, ..., CellClassN.self)
</code></pre>

<ul>
<li>Section header/footer</li>
</ul>


<pre><code class="swift">    let header = MYHeaderFooterViewModel(viewClass: CustomHeaderView.self, userData: yourData) {
        println("Did select header view")
    }
    hakuba[Section.Top].header = header

    // hide header in section 1
    hakuba[Section.Center].header?.enabled = false
</code></pre>

<ul>
<li>Loadmore</li>
</ul>


<pre><code class="swift">    hakuba.loadmoreEnabled = true
    hakuba.loadmoreHandler = {
        // request api
        // append new data
    }
</code></pre>

<ul>
<li>Commit editing</li>
</ul>


<pre><code class="swift">    hakuba.commitEditingHandler = { [weak self] style, indexPath in
        self?.hakuba[indexPath.section].remove(indexPath.row)
    }
</code></pre>

<ul>
<li>Deselect all cells</li>
</ul>


<pre><code class="swift">    hakuba.deselectAllCells(animated: true)
</code></pre>

<ul>
<li>Dynamic cell height : when you want to enable dynamic cell height, you only need to set the value of estimated height to the <code>height</code> parameter and set <code>dynamicHeightEnabled = true</code></li>
</ul>


<pre><code class="swift">    let cellmodel = MYCellModel(cellClass: YourCell.self, height: 50, userData: yourCellData) {
        println("Did select cell")
    }
    cellmodel.dynamicHeightEnabled = true
</code></pre>

<ul>
<li>Callback methods in the cell class</li>
</ul>


<pre><code class="swift">    func willAppear(data: MYCellModel)
    func didDisappear(data: MYCellModel)
</code></pre>

<h2>Installation</h2>

<ul>
<li>Installation with CocoaPods</li>
</ul>


<pre><code>    pod 'Hakuba'
</code></pre>

<ul>
<li>Copying all the files into your project</li>
<li>Using submodule</li>
</ul>


<h2>Requirements</h2>

<ul>
<li>iOS 7.0+</li>
<li>Xcode 6.1</li>
</ul>


<h2>License</h2>

<p>Hakuba is released under the MIT license. See LICENSE for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MaterialKit]]></title>
    <link href="http://nghialv.github.io/blog/2015/01/20/materialkit/"/>
    <updated>2015-01-20T01:20:13+09:00</updated>
    <id>http://nghialv.github.io/blog/2015/01/20/materialkit</id>
    <content type="html"><![CDATA[<p>Material design components (inspired by <a href="http://www.google.com/design/spec/material-design/introduction.html">Google Material Design</a>) for iOS written in Swift</p>

<p>Please feel free to make pull requests.</p>

<p><a href="https://github.com/nghialv/MaterialKit">Github</a></p>

<h2>Features</h2>

<ul>
<li>Highly customizable</li>
<li>Complete example</li>
<li>Supports @IBDesignable to live-render the component in the Interface Builder</li>
<li><p>By suporting @IBInspectable, the class properties can be exposed in the Interface Builder, and you can edit these properties in realtime</p></li>
<li><p>[x] MKButton: floating action button, raised button, flat button, ripple effect</p></li>
<li>[x] MKTextField: ripple effect, floating placeholder</li>
<li>[x] MKTableViewCell</li>
<li>[x] MKLabel</li>
<li>[x] MKImageView</li>
<li>[ ] MKTextView <strong>(In progress)</strong></li>
<li>[ ] MKSwitch <strong>(In progress)</strong></li>
<li>[ ] MKAlert <strong>(In progress)</strong></li>
<li>[ ] MKActivityIndicator <strong>(In progress)</strong></li>
<li>[x] MKLayer</li>
<li>[x] MKColor</li>
</ul>


<h2>Components</h2>

<h4>MKButton</h4>

<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKButton.gif" width="365" height="568">
</p>


<ul>
<li>There are 3 types of main buttons: <code>Floating Action Button</code>, <code>Raised Button</code>, <code>Flat Button</code></li>
<li>Custommizable attributes: color, ripple location, animation timing function, animation duration&hellip;</li>
</ul>


<pre><code class="swift">    let button = MKButton(frame: CGRect(x: 10, y: 10, width: 100, height: 35))
    button.maskEnabled = true
    button.rippleLocation = .TapLocation
    button.rippleLayerColor = UIColor.MKColor.LightGreen
</code></pre>

<h4>MKTextField</h4>

<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKTextField.gif" width="365" height="568">
</p>


<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKTextField_bottomborder.gif" width="365" height="111">
</p>


<ul>
<li>Single-line text field</li>
<li>Floating placeholder</li>
<li>Ripple Animation</li>
<li>Custommizable attributes: color, ripple location, bottom border, animation timing function, animation duration&hellip;</li>
</ul>


<pre><code class="swift">    textField.rippleLocation = .Left
    textField.floatingPlaceholderEnabled = true
    textField.placeholder = "Description"
    textField.layer.borderColor = UIColor.MKColor.Green.CGColor
    textField.rippleLayerColor = UIColor.MKColor.LightGreen
</code></pre>

<h4>MKTableViewCell</h4>

<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKTableViewCell.gif" width="365" height="568">
</p>


<ul>
<li>Custommizable attributes: color, ripple location, animation timing function, animation duration&hellip;</li>
</ul>


<pre><code class="swift">    var cell = tableView.dequeueReusableCellWithIdentifier("MyCell") as MyCell
    cell.rippleLocation = .Center
    cell.rippleLayerColor = UIColor.MKColor.Blue
</code></pre>

<h4>MKLabel, MKImageView (BarButtonItem)</h4>

<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKBarButtonItem.gif" width="373" height="334">
</p>


<ul>
<li>Custommizable attributes: color, ripple location, animation timing function, animation duration&hellip;</li>
<li><p>Play ripple animation whenever you want by calling <code>animateRipple</code> method
or by setting <code>userInteractionEnabled = true</code> ripple animation will be played when the label/imageview is tapped</p></li>
<li><p>Easy to customize UIBarButtonItem or UITabBarButton by using MKLabel or MKImageView</p></li>
</ul>


<pre><code class="swift">    // customize UIBarButtonItem by using MKImageView
    let imgView = MKImageView(frame: CGRect(x: 0, y: 0, width: 44, height: 32))
    imgView.image = UIImage(named: "uibaritem_icon.png")
    imgView.rippleLocation = .Center
    imgView.userInteractionEnabled = true

    let rightBarButton = UIBarButtonItem(customView: imgView)
    self.navigationItem.rightBarButtonItem = rightBarButton
</code></pre>

<h4>MKProgressView (Coming Soon)</h4>

<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKProgressView2.gif" width="217" height="155">
</p>




<p align="center">
<img style="-webkit-user-select: none;" src="https://dl.dropboxusercontent.com/u/8556646/MKProgressView.gif" width="217" height="155">
</p>


<h4>MKLayer</h4>

<p>A subclass of CALayer.</p>

<h4>MKColor</h4>

<p>A category for UIColor that adds some methods to get flat colors designed by <a href="http://www.google.com/design/spec/style/color.html">Google</a></p>

<pre><code class="swift">    // get color from UIColor
    let lightBlueColor = UIColor.MKColor.LightBlue
</code></pre>

<h2>TODO</h2>

<ul>
<li>[x] pod file</li>
</ul>


<h2>Installation</h2>

<ul>
<li>Installation with CocoaPods</li>
</ul>


<pre><code>    pod 'MaterialKit'
</code></pre>

<ul>
<li>Copying all the files into your project</li>
<li>Using submodule</li>
</ul>


<h2>Requirements</h2>

<ul>
<li>iOS 7.0+</li>
<li>Xcode 6.1</li>
</ul>


<h2>License</h2>

<p>MaterialKit is released under the MIT license. See LICENSE for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Net - a HttpRequest wrapper]]></title>
    <link href="http://nghialv.github.io/blog/2014/10/15/net-a-httprequest-wrapper-written-in-swift/"/>
    <updated>2014-10-15T08:29:00+09:00</updated>
    <id>http://nghialv.github.io/blog/2014/10/15/net-a-httprequest-wrapper-written-in-swift</id>
    <content type="html"><![CDATA[<p>Net is a HttpRequest wrapper written in Swift.</p>

<p><a href="https://github.com/nghialv/Net">source code : https://github.com/nghialv/Net</a></p>

<h3>Features</h3>

<ul>
<li>GET, POST, PUT, DELETE method</li>
<li>Powerful request params: nested params, number, string, dic, array, image, data</li>
<li>Json, Image, Xml Response</li>
<li>Download file: resume, suspend, cancel</li>
<li>Upload file, data, params(multi-part)</li>
<li>Progress closure</li>
<li>Background donwload, upload</li>
<li>Authentication</li>
<li>Batch of operations</li>
<li>BaseURL</li>
<li>Customizable header</li>
</ul>


<h3>Demo app</h3>

<p><img src="https://dl.dropboxusercontent.com/u/8556646/screenshot2.png" alt="screenshot" /></p>

<h3>Usage</h3>

<p>Use one of the following methods to create a Net instance</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// without baseURL</span>
</span><span class='line'><span class="k">let</span> <span class="n">net</span> <span class="o">=</span> <span class="n">Net</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// with baseURL</span>
</span><span class='line'><span class="k">let</span> <span class="n">net</span> <span class="o">=</span> <span class="n">Net</span><span class="p">(</span><span class="nl">baseUrlString</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.puqiz.com/&quot;</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//www.puqiz.com/&lt;/a&gt;&amp;rdquo;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>HttpRequest</h4>

<h6><code>GET</code> Request</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">get_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">integerNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">doubleNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hello</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">GET</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">result</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can also make a request with absolute url</span>
</span><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.puqiz.com/get_path&quot;</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//www.puqiz.com/get_path&lt;/a&gt;&amp;rdquo;</span>
</span><span class='line'><span class="n">net</span><span class="p">.</span><span class="n">GET</span><span class="p">(</span><span class="nl">absoluteUrl</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">result</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can also use nested params</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// nested params</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">integerNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">floatNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">1.5</span><span class="p">,</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">array</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">],</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">dictionary</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">x</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">100.0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">y</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">200.0</span><span class="p">],</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">image</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="n">NetData</span><span class="p">(</span><span class="nl">pngImage</span><span class="p">:</span> <span class="n">img</span><span class="p">,</span> <span class="nl">filename</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">myIcon</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>By using responseData in sucessHandler closure you can quickly</p>

<ul>
<li>get json dictionary</li>
<li>get image</li>
<li>parse xml</li>
</ul>


<p>for GET, POST, PUT, DELETE request.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// get json dictionary from response data</span>
</span><span class='line'><span class="k">let</span> <span class="n">jsonDic</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="n">error</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// get image from response data</span>
</span><span class='line'><span class="k">let</span> <span class="n">image</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">image</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// parse xml with delegate</span>
</span><span class='line'><span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">parseXml</span><span class="p">(</span><span class="nl">delegate</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6><code>POST</code> Request</h6>

<p>Net will automatically check your params to send request as a URL-Encoded request or a Multi-Part request. So you can easily post with number, string, image or binary data.</p>

<ul>
<li>URL-Encoded Request</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">post_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">integerNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">floatNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">1.5</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">POST</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">result</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Multi-Part Request</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">post_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">img</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">puqiz_icon</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">integerNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">icon</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="n">NetData</span><span class="p">(</span><span class="nl">pngImage</span><span class="p">:</span> <span class="n">img</span><span class="p">,</span> <span class="nl">filename</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">myIcon</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">POST</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">result</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6><code>PUT</code> Request</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">put_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">integerNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">floatNumber</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mf">1.5</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">PUT</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">responseData</span><span class="p">.</span><span class="n">json</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">result</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6><code>DELETE</code> Request</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">delete_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="kt">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">10</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">DELETE</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">successHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">responseData</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">result</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">failureHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Task</h4>

<p>Before using download/upload function you have to call <code>setupSession</code> method to setup the session.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// setup session without backgroundIdentifier</span>
</span><span class='line'><span class="n">net</span><span class="p">.</span><span class="n">setupSession</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>To perform background downloads or uploads, you have to call <code>setupSession</code> method with a background identifier string. Then your download/upload tasks can be run even when the app is suspended, exits or crashes.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// setup session with backgroundIdentifier</span>
</span><span class='line'><span class="n">net</span><span class="p">.</span><span class="n">setupSession</span><span class="p">(</span><span class="nl">backgroundIdentifier</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">com</span><span class="p">.</span><span class="n">nghialv</span><span class="p">.</span><span class="n">download</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can set eventsForBackgroundHandler closure</span>
</span><span class='line'><span class="c1">// this closure will be invoked when a task is completed in the background</span>
</span><span class='line'><span class="n">net</span><span class="p">.</span><span class="n">eventsForBackgroundHandler</span> <span class="o">=</span> <span class="p">{</span> <span class="n">urlSession</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">urlSession</span><span class="p">.</span><span class="n">getDownloadingTasksCount</span><span class="p">{</span> <span class="n">downloadingTaskCount</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">downloadingTaskCount</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">All</span> <span class="n">files</span> <span class="n">have</span> <span class="n">been</span> <span class="n">downloaded</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6>Download</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">downloadTask</span> <span class="o">=</span> <span class="n">net</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="nl">absoluteUrl</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">progress</span><span class="p">:</span> <span class="p">{</span> <span class="n">progress</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">progress</span> <span class="p">(</span><span class="n">progress</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">fileUrl</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Download</span> <span class="n">failed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Downloaded</span> <span class="nl">to</span>  <span class="p">:</span> <span class="p">(</span><span class="n">fileUrl</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can control your task</span>
</span><span class='line'><span class="n">downloadTask</span><span class="p">.</span><span class="n">resume</span><span class="p">()</span>
</span><span class='line'><span class="n">downloadTask</span><span class="p">.</span><span class="n">suspend</span><span class="p">()</span>
</span><span class='line'><span class="n">downloadTask</span><span class="p">.</span><span class="n">cancel</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6>Upload</h6>

<ul>
<li>Upload with file path</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">task</span> <span class="o">=</span> <span class="n">net</span><span class="p">.</span><span class="n">upload</span><span class="p">(</span><span class="nl">absoluteUrl</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">fromFile</span><span class="p">:</span> <span class="n">file</span><span class="p">,</span> <span class="nl">progressHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">progress</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">progress</span> <span class="p">(</span><span class="n">progress</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Upload</span> <span class="nl">failed</span> <span class="p">:</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Upload</span> <span class="n">completed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Upload with data</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">yourData</span> <span class="o">=</span> <span class="bp">NSData</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">upload</span><span class="p">(</span><span class="nl">absoluteUrl</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">data</span><span class="p">:</span> <span class="n">yourData</span><span class="p">,</span> <span class="nl">progressHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">progress</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">progress</span><span class="p">:</span> <span class="p">(</span><span class="n">progress</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Upload</span> <span class="n">completed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Upload with params</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">image</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">image_file</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">let</span> <span class="n">imageData</span> <span class="o">=</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">number</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">net</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">data</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="n">imageData</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">net</span><span class="p">.</span><span class="n">upload</span><span class="p">(</span><span class="nl">absoluteUrl</span><span class="p">:</span> <span class="n">imgUrl</span><span class="p">,</span> <span class="nl">params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="nl">progressHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">progress</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">progress</span><span class="p">:</span> <span class="p">(</span><span class="n">progress</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Upload</span> <span class="n">completed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>By default, the upload task will be performed as POST method and</p>

<ul>
<li><code>Content-Type</code> = <code>application/octet-stream</code> (upload with file or data)</li>
<li><code>Content-Type</code> = <code>multipart/form-data</code> (upload with params)</li>
</ul>


<p>But you can configure the upload task before resuming.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// set method</span>
</span><span class='line'><span class="n">yourUploadTask</span><span class="p">.</span><span class="n">setHttpMethod</span><span class="p">(.</span><span class="n">PUT</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// set header field</span>
</span><span class='line'><span class="n">yourUploadTask</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="nl">value</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">your_value</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nl">forHttpHeaderField</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">header_field</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>In progress</h3>

<ul>
<li>Batch of operations</li>
<li>Basic authentiacation</li>
</ul>


<h3>Integration</h3>

<p>Just drag Net folder to the project tree</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puqiz]]></title>
    <link href="http://nghialv.github.io/blog/2014/10/05/puqiz/"/>
    <updated>2014-10-05T12:25:57+09:00</updated>
    <id>http://nghialv.github.io/blog/2014/10/05/puqiz</id>
    <content type="html"><![CDATA[<h3>Description</h3>

<p>プログラミングクイズアプリです.
Swift, Ruby, Java, C++などの言語に関する質問を解いてみませんか.</p>

<p>プログラミングが好きな人は大歓迎. (^^)</p>

<p>FEATURES</p>

<ul>
<li>クイズを 解く (コードのクイズもある）</li>
<li>ランキング</li>
<li>歴史の閲覧</li>
<li>質問のストック</li>
<li>質問作成</li>
<li>共有</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD - a wrapper of Grand Central Dispatch]]></title>
    <link href="http://nghialv.github.io/blog/2014/10/01/gcd-a-wrapper-of-grand-central-dispatch-written-in-swift/"/>
    <updated>2014-10-01T20:22:00+09:00</updated>
    <id>http://nghialv.github.io/blog/2014/10/01/gcd-a-wrapper-of-grand-central-dispatch-written-in-swift</id>
    <content type="html"><![CDATA[<p>GCD is a wrapper of Grand Central Dispatch written in Swift.</p>

<p><a href="https://github.com/nghialv/GCD">source code : https://github.com/nghialv/GCD</a></p>

<h3>Examples</h3>

<h6>- gcd</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// submit your code for asynchronous execution on a global queue with high priority</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">High</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// or with main thread</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'>    <span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// code run on main thread</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// with your custom queue</span>
</span><span class='line'><span class="k">let</span> <span class="n">myQueue</span> <span class="o">=</span> <span class="n">GCDQueue</span><span class="p">(</span><span class="nl">serial</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">myQueue</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Custom</span><span class="p">(</span><span class="n">myQueue</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// run with delay</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Background</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">5.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// sync code</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">sync</span><span class="p">(.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// apply</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">apply</span><span class="p">(.</span><span class="n">Default</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span> <span class="n">index</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// once</span>
</span><span class='line'><span class="k">var</span> <span class="nl">onceToken</span><span class="p">:</span> <span class="n">GCDOnce</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">gcd</span><span class="p">.</span><span class="n">once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">onceToken</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6>- manage group of block with GCDGroup</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// create group</span>
</span><span class='line'><span class="k">let</span> <span class="n">group</span> <span class="o">=</span> <span class="n">GCDGroup</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can add async code to group</span>
</span><span class='line'><span class="n">group</span><span class="p">.</span><span class="n">async</span><span class="p">(.</span><span class="n">Defaul</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can set notify for this group</span>
</span><span class='line'><span class="n">group</span><span class="p">.</span><span class="n">notify</span><span class="p">(.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// or wait synchronously for block in group to complete and timeout is 10 seconds</span>
</span><span class='line'><span class="n">group</span><span class="p">.</span><span class="n">wait</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h6>- create your custom queue with CGDQueue</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// create a serial queue</span>
</span><span class='line'><span class="k">let</span> <span class="n">serialQueue</span> <span class="o">=</span> <span class="n">GCDQueue</span><span class="p">(</span><span class="nl">serial</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">mySerialQueue</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// create a concurrent queue</span>
</span><span class='line'><span class="k">let</span> <span class="n">concurrentQueue</span> <span class="o">=</span> <span class="n">GCDQueue</span><span class="p">(</span><span class="nl">concurrent</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">myConcurrentQueue</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// you can submit async barrier to queue</span>
</span><span class='line'><span class="n">myQueue</span><span class="p">.</span><span class="n">asyncBarrier</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// or sync code</span>
</span><span class='line'><span class="n">myQueue</span><span class="p">.</span><span class="n">syncBarrier</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// your code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Integration</h3>

<p>Just drag GCD.swift file to the project tree</p>
]]></content>
  </entry>
  
</feed>
